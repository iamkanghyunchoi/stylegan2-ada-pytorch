Loading training set...

Num images:  70000
Image shape: [3, 1024, 1024]
Label shape: [0]

Constructing networks...
Setting up PyTorch plugin "bias_act_plugin"... Done.
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
Setting up PyTorch plugin "upfirdn2d_plugin"... Done.
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])

Generator              Parameters  Buffers  Output shape         Datatype
---                    ---         ---      ---                  ---     
mapping.fc0            262656      -        [4, 512]             float32 
mapping.fc1            262656      -        [4, 512]             float32 
mapping                -           512      [4, 18, 512]         float32 
synthesis.b4.conv1     4726545     32       [4, 512, 4, 4]       float32 
synthesis.b4.torgb     264195      -        [4, 3, 4, 4]         float32 
synthesis.b4:0         8192        16       [4, 512, 4, 4]       float32 
synthesis.b4:1         -           -        [4, 512, 4, 4]       float32 
synthesis.b8.conv0     4730433     80       [4, 512, 8, 8]       float32 
synthesis.b8.conv1     4730433     80       [4, 512, 8, 8]       float32 
synthesis.b8.torgb     264195      -        [4, 3, 8, 8]         float32 
synthesis.b8:0         -           16       [4, 512, 8, 8]       float32 
synthesis.b8:1         -           -        [4, 512, 8, 8]       float32 
synthesis.b16.conv0    4792065     272      [4, 512, 16, 16]     float32 
synthesis.b16.conv1    4792065     272      [4, 512, 16, 16]     float32 
synthesis.b16.torgb    264195      -        [4, 3, 16, 16]       float32 
synthesis.b16:0        -           16       [4, 512, 16, 16]     float32 
synthesis.b16:1        -           -        [4, 512, 16, 16]     float32 
synthesis.b32.conv0    5775873     1040     [4, 512, 32, 32]     float32 
synthesis.b32.conv1    5775873     1040     [4, 512, 32, 32]     float32 
synthesis.b32.torgb    264195      -        [4, 3, 32, 32]       float32 
synthesis.b32:0        -           16       [4, 512, 32, 32]     float32 
synthesis.b32:1        -           -        [4, 512, 32, 32]     float32 
synthesis.b64.conv0    21507585    4112     [4, 512, 64, 64]     float32 
synthesis.b64.conv1    21507585    4112     [4, 512, 64, 64]     float32 
synthesis.b64.torgb    264195      -        [4, 3, 64, 64]       float32 
synthesis.b64:0        -           16       [4, 512, 64, 64]     float32 
synthesis.b64:1        -           -        [4, 512, 64, 64]     float32 
synthesis.b128.conv0   271735809   16400    [4, 256, 128, 128]   float16 
synthesis.b128.conv1   269700865   16400    [4, 256, 128, 128]   float16 
synthesis.b128.torgb   132099      -        [4, 3, 128, 128]     float16 
synthesis.b128:0       -           16       [4, 256, 128, 128]   float16 
synthesis.b128:1       -           -        [4, 256, 128, 128]   float32 
synthesis.b256.conv0   426369      65552    [4, 128, 256, 256]   float16 
synthesis.b256.conv1   213249      65552    [4, 128, 256, 256]   float16 
synthesis.b256.torgb   66051       -        [4, 3, 256, 256]     float16 
synthesis.b256:0       -           16       [4, 128, 256, 256]   float16 
synthesis.b256:1       -           -        [4, 128, 256, 256]   float32 
synthesis.b512.conv0   139457      262160   [4, 64, 512, 512]    float16 
synthesis.b512.conv1   69761       262160   [4, 64, 512, 512]    float16 
synthesis.b512.torgb   33027       -        [4, 3, 512, 512]     float16 
synthesis.b512:0       -           16       [4, 64, 512, 512]    float16 
synthesis.b512:1       -           -        [4, 64, 512, 512]    float32 
synthesis.b1024.conv0  51297       1048592  [4, 32, 1024, 1024]  float16 
synthesis.b1024.conv1  25665       1048592  [4, 32, 1024, 1024]  float16 
synthesis.b1024.torgb  16515       -        [4, 3, 1024, 1024]   float16 
synthesis.b1024:0      -           16       [4, 32, 1024, 1024]  float16 
synthesis.b1024:1      -           -        [4, 32, 1024, 1024]  float32 
---                    ---         ---      ---                  ---     
Total                  622803100   2797104  -                    -       


Discriminator  Parameters  Buffers  Output shape         Datatype
---            ---         ---      ---                  ---     
b1024.fromrgb  128         16       [4, 32, 1024, 1024]  float16 
b1024.skip     2048        16       [4, 64, 512, 512]    float16 
b1024.conv0    9248        16       [4, 32, 1024, 1024]  float16 
b1024.conv1    18496       16       [4, 64, 512, 512]    float16 
b1024          -           16       [4, 64, 512, 512]    float16 
b512.skip      8192        16       [4, 128, 256, 256]   float16 
b512.conv0     36928       16       [4, 64, 512, 512]    float16 
b512.conv1     73856       16       [4, 128, 256, 256]   float16 
b512           -           16       [4, 128, 256, 256]   float16 
b256.skip      32768       16       [4, 256, 128, 128]   float16 
b256.conv0     147584      16       [4, 128, 256, 256]   float16 
b256.conv1     295168      16       [4, 256, 128, 128]   float16 
b256           -           16       [4, 256, 128, 128]   float16 
b128.skip      131072      16       [4, 512, 64, 64]     float16 
b128.conv0     590080      16       [4, 256, 128, 128]   float16 
b128.conv1     1180160     16       [4, 512, 64, 64]     float16 
b128           -           16       [4, 512, 64, 64]     float16 
b64.skip       262144      16       [4, 512, 32, 32]     float32 
b64.conv0      2359808     16       [4, 512, 64, 64]     float32 
b64.conv1      2359808     16       [4, 512, 32, 32]     float32 
b64            -           16       [4, 512, 32, 32]     float32 
b32.skip       262144      16       [4, 512, 16, 16]     float32 
b32.conv0      2359808     16       [4, 512, 32, 32]     float32 
b32.conv1      2359808     16       [4, 512, 16, 16]     float32 
b32            -           16       [4, 512, 16, 16]     float32 
b16.skip       262144      16       [4, 512, 8, 8]       float32 
b16.conv0      2359808     16       [4, 512, 16, 16]     float32 
b16.conv1      2359808     16       [4, 512, 8, 8]       float32 
b16            -           16       [4, 512, 8, 8]       float32 
b8.skip        262144      16       [4, 512, 4, 4]       float32 
b8.conv0       2359808     16       [4, 512, 8, 8]       float32 
b8.conv1       2359808     16       [4, 512, 4, 4]       float32 
b8             -           16       [4, 512, 4, 4]       float32 
b4.mbstd       -           -        [4, 513, 4, 4]       float32 
b4.conv        2364416     16       [4, 512, 4, 4]       float32 
b4.fc          4194816     -        [4, 512]             float32 
b4.out         513         -        [4, 1]               float32 
---            ---         ---      ---                  ---     
Total          29012513    544      -                    -       

Setting up augmentation...
Distributing across 1 GPUs...
Setting up training phases...
Exporting sample images...
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 512, 4, 4])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 16, 512])
gate, weight torch.Size([4, 1, 16, 1024]) torch.Size([1, 16, 16])
after gmlp torch.Size([4, 16, 512])
after to img torch.Size([4, 512, 4, 4])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 8, 8])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 64, 512])
gate, weight torch.Size([4, 1, 64, 1024]) torch.Size([1, 64, 64])
after gmlp torch.Size([4, 64, 512])
after to img torch.Size([4, 512, 8, 8])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 16, 16])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 256, 512])
gate, weight torch.Size([4, 1, 256, 1024]) torch.Size([1, 256, 256])
after gmlp torch.Size([4, 256, 512])
after to img torch.Size([4, 512, 16, 16])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 32, 32])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 1024, 512])
gate, weight torch.Size([4, 1, 1024, 1024]) torch.Size([1, 1024, 1024])
after gmlp torch.Size([4, 1024, 512])
after to img torch.Size([4, 512, 32, 32])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 512, 64, 64])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=512, out_features=512, bias=True)
)
after embed torch.Size([4, 4096, 512])
gate, weight torch.Size([4, 1, 4096, 1024]) torch.Size([1, 4096, 4096])
after gmlp torch.Size([4, 4096, 512])
after to img torch.Size([4, 512, 64, 64])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=512, bias=True)
)
after embed torch.Size([4, 16384, 512])
gate, weight torch.Size([4, 1, 16384, 1024]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 512])
after to img torch.Size([4, 256, 128, 128])
before input torch.Size([4, 256, 128, 128])
Sequential(
  (0): Rearrange('b c h w -> b (h w) c')
  (1): Linear(in_features=256, out_features=256, bias=True)
)
after embed torch.Size([4, 16384, 256])
gate, weight torch.Size([4, 1, 16384, 512]) torch.Size([1, 16384, 16384])
after gmlp torch.Size([4, 16384, 256])
after to img torch.Size([4, 256, 128, 128])

Aborted!
